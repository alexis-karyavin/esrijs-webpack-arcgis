// COPYRIGHT Â© 2020 Esri
//
// All rights reserved under the copyright laws of the United States
// and applicable international laws, treaties, and conventions.
//
// This material is licensed for use under the Esri Master License
// Agreement (MLA), and is bound by the terms of that agreement.
// You may redistribute and use this code without modification,
// provided you adhere to the terms of the MLA and include this
// copyright notice.
//
// See use restrictions at http://www.esri.com/legal/pdfs/mla_e204_e300/english
//
// For additional information, contact:
// Environmental Systems Research Institute, Inc.
// Attn: Contracts and Legal Services Department
// 380 New York Street
// Redlands, California, USA 92373
// USA
//
// email: contracts@esri.com
//
// See http://js.arcgis.com/4.16/esri/copyright.txt for details.

define(["require","exports","tslib","../geometry","../request","../core/jsonMap","../core/accessorSupport/decorators","../core/accessorSupport/ensureType","../geometry/support/jsonUtils","./Task","./operations/generalize","./operations/lengths","./operations/offset","./operations/relation","./operations/trimExtend","./support/GeneralizeParameters","./support/LengthsParameters","./support/OffsetParameters","./support/ProjectParameters","./support/RelationParameters","./support/TrimExtendParameters"],(function(e,t,r,s,n,i,a,o,_,p,N,u,f,g,T,c,I,l,d,O,U){var S=new i.JSONMap({MGRS:"mgrs",USNG:"usng",UTM:"utm",GeoRef:"geo-ref",GARS:"gars",DMS:"dms",DDM:"ddm",DD:"dd"}),h=o.ensureType(d);return function(e){function t(t){var r=e.call(this,t)||this;return r.url=null,r}return r.__extends(t,e),t.prototype.areasAndLengths=function(e,t){var s=r.__assign(r.__assign(r.__assign({},this.parsedUrl.query),{f:"json"}),e.toJSON()),i=this._asValidOptions(s,t);return n(this.parsedUrl.path+"/areasAndLengths",i).then((function(e){return e.data}))},t.prototype.autoComplete=function(e,t,i){var a=e[0].spatialReference,o=r.__assign(r.__assign({},this.parsedUrl.query),{f:"json",sr:JSON.stringify(a.toJSON()),polygons:JSON.stringify(this._encodeGeometries(e).geometries),polylines:JSON.stringify(this._encodeGeometries(t).geometries)}),_=this._asValidOptions(o,i);return n(this.parsedUrl.path+"/autoComplete",_).then((function(e){return(e.data.geometries||[]).map((function(e){return new s.Polygon({spatialReference:a,rings:e.rings})}))}))},t.prototype.buffer=function(e,t){var i=r.__assign(r.__assign(r.__assign({},this.parsedUrl.query),{f:"json"}),e.toJSON()),a=e.outSpatialReference||e.geometries[0].spatialReference,o=this._asValidOptions(i,t);return n(this.parsedUrl.path+"/buffer",o).then((function(e){return(e.data.geometries||[]).map((function(e){return new s.Polygon({spatialReference:a,rings:e.rings})}))}))},t.prototype.convexHull=function(e,t){var s=e[0].spatialReference,i=r.__assign(r.__assign({},this.parsedUrl.query),{f:"json",sr:JSON.stringify(s.toJSON()),geometries:JSON.stringify(this._encodeGeometries(e))}),a=this._asValidOptions(i,t);return n(this.parsedUrl.path+"/convexHull",a).then((function(e){var t=e.data;return _.fromJSON(t.geometry).set({spatialReference:s})}))},t.prototype.cut=function(e,t,s){var i=e[0].spatialReference,a=e.map((function(e){return e.toJSON()})),o=r.__assign(r.__assign({},this.parsedUrl.query),{f:"json",sr:JSON.stringify(i.toJSON()),target:JSON.stringify({geometryType:_.getJsonType(e[0]),geometries:a}),cutter:JSON.stringify(t.toJSON())}),p=this._asValidOptions(o,s);return n(this.parsedUrl.path+"/cut",p).then((function(e){var t=e.data,r=t.geometries||[];return{cutIndexes:t.cutIndexes,geometries:r.map((function(e){return _.fromJSON(e).set({spatialReference:i})}))}}))},t.prototype.densify=function(e,t){var s=e.geometries[0].spatialReference,i=r.__assign(r.__assign(r.__assign({},this.parsedUrl.query),{f:"json"}),e.toJSON()),a=this._asValidOptions(i,t);return n(this.parsedUrl.path+"/densify",a).then((function(e){return(e.data.geometries||[]).map((function(e){return _.fromJSON(e).set({spatialReference:s})}))}))},t.prototype.difference=function(e,t,s){var i=e[0].spatialReference,a={query:r.__assign(r.__assign({},this.parsedUrl.query),{f:"json",sr:JSON.stringify(i.toJSON()),geometries:JSON.stringify(this._encodeGeometries(e)),geometry:JSON.stringify({geometryType:_.getJsonType(t),geometry:t.toJSON()})})};return(this.requestOptions||s)&&(a=r.__assign(r.__assign(r.__assign({},this.requestOptions),s),a)),n(this.parsedUrl.path+"/difference",a).then((function(e){return(e.data.geometries||[]).map((function(e){return _.fromJSON(e).set({spatialReference:i})}))}))},t.prototype.distance=function(e,t){var s=r.__assign(r.__assign(r.__assign({},this.parsedUrl.query),{f:"json"}),e.toJSON()),i=this._asValidOptions(s,t);return n(this.parsedUrl.path+"/distance",i).then((function(e){var t=e.data;return t&&t.distance}))},t.prototype.fromGeoCoordinateString=function(e,t){var s={};null!=e.sr&&"object"==typeof e.sr?s.sr=e.sr.wkid||JSON.stringify(e.sr):s.sr=e.sr,s.strings=JSON.stringify(e.strings);var i=e.conversionType||"mgrs";s.conversionType=S.toJSON(i),s.conversionMode=e.conversionMode;var a=r.__assign(r.__assign(r.__assign({},this.parsedUrl.query),{f:"json"}),s),o=this._asValidOptions(a,t);return n(this.parsedUrl.path+"/fromGeoCoordinateString",o).then((function(e){return e.data.coordinates}))},t.prototype.generalize=function(e,t){var s=(e=c.from(e)).toJSON(),i=N.generalizeToRESTParameters(e),a=r.__assign(r.__assign(r.__assign({},this.parsedUrl.query),{f:"json"}),i),o=s.geometries[0].spatialReference,p=this._asValidOptions(a,t);return n(this.parsedUrl.path+"/generalize",p).then((function(e){return(e.data.geometries||[]).map((function(e){return _.fromJSON(e).set({spatialReference:o})}))}))},t.prototype.intersect=function(e,t,s){var i=e[0].spatialReference,a=r.__assign(r.__assign({},this.parsedUrl.query),{f:"json",sr:JSON.stringify(i.toJSON()),geometries:JSON.stringify(this._encodeGeometries(e)),geometry:JSON.stringify({geometryType:_.getJsonType(t),geometry:t.toJSON()})}),o=this._asValidOptions(a,s);return n(this.parsedUrl.path+"/intersect",o).then((function(e){return(e.data.geometries||[]).map((function(e){return _.fromJSON(e).set({spatialReference:i})}))}))},t.prototype.labelPoints=function(e,t){var s=e.map((function(e){return e.toJSON()})),i=e[0].spatialReference,a=r.__assign(r.__assign({},this.parsedUrl.query),{f:"json",sr:i.wkid?i.wkid:JSON.stringify(i.toJSON()),polygons:JSON.stringify(s)}),o=this._asValidOptions(a,t);return n(this.parsedUrl.path+"/labelPoints",o).then((function(e){return(e.data.labelPoints||[]).map((function(e){return _.fromJSON(e).set({spatialReference:i})}))}))},t.prototype.lengths=function(e,t){e=I.from(e);var s=u.lengthsToRESTParameters(e),i=r.__assign(r.__assign(r.__assign({},this.parsedUrl.query),{f:"json"}),s),a=this._asValidOptions(i,t);return n(this.parsedUrl.path+"/lengths",a).then((function(e){return e.data}))},t.prototype.offset=function(e,t){e=l.from(e);var s=f.offsetToRESTParameters(e),i=r.__assign(r.__assign(r.__assign({},this.parsedUrl.query),{f:"json"}),s),a=e.geometries[0].spatialReference,o=this._asValidOptions(i,t);return n(this.parsedUrl.path+"/offset",o).then((function(e){return(e.data.geometries||[]).map((function(e){return _.fromJSON(e).set({spatialReference:a})}))}))},t.prototype.project=function(e,t){var s=this;e=h(e);var i=r.__assign(r.__assign(r.__assign({},this.parsedUrl.query),{f:"json"}),e.toJSON()),a=e.outSpatialReference,o=_.getJsonType(e.geometries[0]),p=this._asValidOptions(i,t);return n(this.parsedUrl.path+"/project",p).then((function(e){var t=e.data;return s._decodeGeometries(t,o,a)}))},t.prototype.relation=function(e,t){e=O.from(e);var s=g.relationToRESTParameters(e),i=r.__assign(r.__assign(r.__assign({},this.parsedUrl.query),{f:"json"}),s),a=this._asValidOptions(i,t);return n(this.parsedUrl.path+"/relation",a).then((function(e){return e.data.relations}))},t.prototype.reshape=function(e,t,s){var i=e.spatialReference,a=r.__assign(r.__assign({},this.parsedUrl.query),{f:"json",sr:JSON.stringify(i.toJSON()),target:JSON.stringify({geometryType:_.getJsonType(e),geometry:e.toJSON()}),reshaper:JSON.stringify(t.toJSON())}),o=this._asValidOptions(a,s);return n(this.parsedUrl.path+"/reshape",o).then((function(e){var t=e.data;return _.fromJSON(t.geometry).set({spatialReference:i})}))},t.prototype.simplify=function(e,t){var s=this,i=e[0].spatialReference,a=r.__assign(r.__assign({},this.parsedUrl.query),{f:"json",sr:i.wkid?i.wkid:JSON.stringify(i.toJSON()),geometries:JSON.stringify(this._encodeGeometries(e))}),o=_.getJsonType(e[0]),p=this._asValidOptions(a,t);return n(this.parsedUrl.path+"/simplify",p).then((function(e){var t=e.data;return s._decodeGeometries(t,o,i)}))},t.prototype.toGeoCoordinateString=function(e,t){var s={};null!=e.sr&&"object"==typeof e.sr?s.sr=e.sr.wkid||JSON.stringify(e.sr):s.sr=e.sr,s.coordinates=JSON.stringify(e.coordinates);var i=e.conversionType||"mgrs";s.conversionType=S.toJSON(i),s.conversionMode=e.conversionMode,s.numOfDigits=e.numOfDigits,s.rounding=e.rounding,s.addSpaces=e.addSpaces;var a=r.__assign(r.__assign(r.__assign({},this.parsedUrl.query),{f:"json"}),s),o=this._asValidOptions(a,t);return n(this.parsedUrl.path+"/toGeoCoordinateString",o).then((function(e){return e.data.strings}))},t.prototype.trimExtend=function(e,t){e=U.from(e);var i=T.trimExtendToRESTParameters(e),a=r.__assign(r.__assign(r.__assign({},this.parsedUrl.query),{f:"json"}),i),o=e.sr,_=this._asValidOptions(a,t);return n(this.parsedUrl.path+"/trimExtend",_).then((function(e){return(e.data.geometries||[]).map((function(e){var t=e.paths;return new s.Polyline({spatialReference:o,paths:t})}))}))},t.prototype.union=function(e,t){var s=e[0].spatialReference,i=r.__assign(r.__assign({},this.parsedUrl.query),{f:"json",sr:JSON.stringify(s.toJSON()),geometries:JSON.stringify(this._encodeGeometries(e))}),a=this._asValidOptions(i,t);return n(this.parsedUrl.path+"/union",a).then((function(e){var t=e.data;return _.fromJSON(t.geometry).set({spatialReference:s})}))},t.prototype._asValidOptions=function(e,t){var s={query:e};return(this.requestOptions||t)&&(s=r.__assign(r.__assign(r.__assign({},this.requestOptions),t),s)),s},t.prototype._encodeGeometries=function(e){for(var t=[],r=e.length,s=0;s<r;s++)t.push(e[s].toJSON());return{geometryType:_.getJsonType(e[0]),geometries:t}},t.prototype._decodeGeometries=function(e,t,s){var n=_.getGeometryType(t),i=e.geometries,a=[],o={spatialReference:s.toJSON()};return i.forEach((function(e,t){a[t]=new n(r.__assign(r.__assign({},e),o))})),a},t.prototype._toProjectGeometry=function(e){var t=e.spatialReference.toJSON();return e instanceof s.Extent?new s.Polygon({rings:[[[e.xmin,e.ymin],[e.xmin,e.ymax],[e.xmax,e.ymax],[e.xmax,e.ymin],[e.xmin,e.ymin]]],spatialReference:t}):new s.Polyline({paths:[[].concat(e.points)],spatialReference:t})},t.prototype._fromProjectedGeometry=function(e,t,r){if("extent"===t){var n=e.rings[0];return new s.Extent(n[0][0],n[0][1],n[2][0],n[2][1],r)}return new s.Multipoint({points:e.paths[0],spatialReference:r.toJSON()})},t.UNIT_METER=9001,t.UNIT_GERMAN_METER=9031,t.UNIT_FOOT=9002,t.UNIT_SURVEY_FOOT=9003,t.UNIT_CLARKE_FOOT=9005,t.UNIT_FATHOM=9014,t.UNIT_NAUTICAL_MILE=9030,t.UNIT_SURVEY_CHAIN=9033,t.UNIT_SURVEY_LINK=9034,t.UNIT_SURVEY_MILE=9035,t.UNIT_KILOMETER=9036,t.UNIT_CLARKE_YARD=9037,t.UNIT_CLARKE_CHAIN=9038,t.UNIT_CLARKE_LINK=9039,t.UNIT_SEARS_YARD=9040,t.UNIT_SEARS_FOOT=9041,t.UNIT_SEARS_CHAIN=9042,t.UNIT_SEARS_LINK=9043,t.UNIT_BENOIT_1895A_YARD=9050,t.UNIT_BENOIT_1895A_FOOT=9051,t.UNIT_BENOIT_1895A_CHAIN=9052,t.UNIT_BENOIT_1895A_LINK=9053,t.UNIT_BENOIT_1895B_YARD=9060,t.UNIT_BENOIT_1895B_FOOT=9061,t.UNIT_BENOIT_1895B_CHAIN=9062,t.UNIT_BENOIT_1895B_LINK=9063,t.UNIT_INDIAN_FOOT=9080,t.UNIT_INDIAN_1937_FOOT=9081,t.UNIT_INDIAN_1962_FOOT=9082,t.UNIT_INDIAN_1975_FOOT=9083,t.UNIT_INDIAN_YARD=9084,t.UNIT_INDIAN_1937_YARD=9085,t.UNIT_INDIAN_1962_YARD=9086,t.UNIT_INDIAN_1975_YARD=9087,t.UNIT_FOOT_1865=9070,t.UNIT_RADIAN=9101,t.UNIT_DEGREE=9102,t.UNIT_ARCMINUTE=9103,t.UNIT_ARCSECOND=9104,t.UNIT_GRAD=9105,t.UNIT_GON=9106,t.UNIT_MICRORADIAN=9109,t.UNIT_ARCMINUTE_CENTESIMAL=9112,t.UNIT_ARCSECOND_CENTESIMAL=9113,t.UNIT_MIL6400=9114,t.UNIT_BRITISH_1936_FOOT=9095,t.UNIT_GOLDCOAST_FOOT=9094,t.UNIT_INTERNATIONAL_CHAIN=109003,t.UNIT_INTERNATIONAL_LINK=109004,t.UNIT_INTERNATIONAL_YARD=109001,t.UNIT_STATUTE_MILE=9093,t.UNIT_SURVEY_YARD=109002,t.UNIT_50KILOMETER_LENGTH=109030,t.UNIT_150KILOMETER_LENGTH=109031,t.UNIT_DECIMETER=109005,t.UNIT_CENTIMETER=109006,t.UNIT_MILLIMETER=109007,t.UNIT_INTERNATIONAL_INCH=109008,t.UNIT_US_SURVEY_INCH=109009,t.UNIT_INTERNATIONAL_ROD=109010,t.UNIT_US_SURVEY_ROD=109011,t.UNIT_US_NAUTICAL_MILE=109012,t.UNIT_UK_NAUTICAL_MILE=109013,t.UNIT_SQUARE_INCHES="esriSquareInches",t.UNIT_SQUARE_FEET="esriSquareFeet",t.UNIT_SQUARE_YARDS="esriSquareYards",t.UNIT_ACRES="esriAcres",t.UNIT_SQUARE_MILES="esriSquareMiles",t.UNIT_SQUARE_MILLIMETERS="esriSquareMillimeters",t.UNIT_SQUARE_CENTIMETERS="esriSquareCentimeters",t.UNIT_SQUARE_DECIMETERS="esriSquareDecimeters",t.UNIT_SQUARE_METERS="esriSquareMeters",t.UNIT_ARES="esriAres",t.UNIT_HECTARES="esriHectares",t.UNIT_SQUARE_KILOMETERS="esriSquareKilometers",r.__decorate([a.property()],t.prototype,"url",void 0),t=r.__decorate([a.subclass("esri.tasks.GeometryService")],t)}(p)}));